"use client"

import { useEffect, useState, useReducer, createContext } from 'react';

import { useRouter, usePathname } from 'next/navigation';

import useLoader from '@/lib/loader';
import useDefaultWebsocket from '@/lib/websocket';

import localFont from "next/font/local";
import "@/styles/globals.css";
import Header from "@/components/header";
import Footer from "@/components/footer";
import Sidebar from "@/components/sidebar";

const geistSans = localFont({
  src: "../public/fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "../public/fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

//export const metadata = {
//  title: "Create Next App",
//  description: "Generated by create next app",
//};

import { Bounce, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

import { CLIENT_URL, SERVER_URL } from '@/globals';



export const CurrentUser = createContext(null)

export default function RootLayout({ children }) {

    const router = useRouter()
    const pathname = usePathname()

    const {sendJsonMessage, lastJsonMessage, readyState} = useDefaultWebsocket()

    const [ currentUser, setCurrentUser ] = useLoader()

    const [ sidebarCollapsed, setSidebarCollapsed ] = useState(true)

    // Login 
    useEffect(() => {
        setCurrentUser({type: "LOADING"})
        let currDate = Date.now()

        let expire_date = JSON.parse(localStorage.getItem("AUTH_TOKEN_EXPIRE")) || 0

        if (expire_date < currDate && pathname != "/login") {
            localStorage.removeItem("AUTH_TOKEN")
            localStorage.removeItem("AUTH_TOKEN_EXPIRE")
            router.push("/login", { scroll: false })
            return
        }

        fetch(SERVER_URL + "/profile", {
            method: "GET",
            headers: {
                "Key": "Authorization",
                "Authorization": `Bearer ${JSON.parse(localStorage.getItem("AUTH_TOKEN"))}`
            },
            mode: "cors",
        })
        .then(res => res.json())
        .then((res) => {
            if (!res.success) {
                if (pathname != "/login") {
                    router.push("/login", { scroll: false })
                }
                setCurrentUser({type: "ERROR", payload: null})
            } else {
                if (pathname === "/login") {
                    router.push("/", { scroll: false })
                }
                setCurrentUser({type: "SUCCESS", payload: res.data})
            }
        })
        .catch(err => {
            console.log(err)
        })
    }, [pathname])

    // handle websocket
    useEffect(() => {
        let op = lastJsonMessage?.op
        let ws_data = lastJsonMessage?.data
        if (!op || !lastJsonMessage.path) return

        if (op === "ping") {
            sendJsonMessage({
                "op": "pong"
            })
        }
    }, [lastJsonMessage])

    return (
        <html lang="en">
            <CurrentUser.Provider value={currentUser.data}>
                <body className={`${geistSans.variable} ${geistMono.variable}`}>
                    <Header sidebarCollapsed={sidebarCollapsed} setSidebarCollapsed={setSidebarCollapsed} />
                    <div>
                    <Sidebar collapsed={sidebarCollapsed} />
                    <main>
                        {currentUser.status === "SUCCESS" && pathname != "/login" ||
                        currentUser.status === "ERROR" && pathname === "/login" ?
                        children :
                        <></>}
                    </main>
                    </div>
                    <ToastContainer   
                        position="bottom-right"
                        autoClose={2000}
                        hideProgressBar={false}
                        newestOnTop={false}
                        closeOnClick
                        rtl={false}
                        pauseOnFocusLoss={false}
                        draggable={false}
                        pauseOnHover
                        theme="light"
                        transition={Bounce}
                    />
                    <Footer />
                </body> 
            </CurrentUser.Provider>
        </html>
    );
}
